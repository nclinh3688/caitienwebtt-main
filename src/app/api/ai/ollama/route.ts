import { NextRequest, NextResponse } from 'next/server';
import { multiModelService } from '@/services/MultiModelService';

// T·ª´ ƒëi·ªÉn t·ª´ v·ª±ng ti·∫øng Nh·∫≠t m·ªü r·ªông
const JAPANESE_VOCAB: { [key: string]: string } = {
  // Ch√†o h·ªèi c∆° b·∫£n
  'xin ch√†o': '„Åì„Çì„Å´„Å°„ÅØ (konnichiwa)',
  'c·∫£m ∆°n': '„ÅÇ„Çä„Åå„Å®„ÅÜ (arigatou)',
  't√¥i y√™u b·∫°n': 'ÊÑõ„Åó„Å¶„Çã (aishiteru)',
  'ch√∫c ng·ªß ngon': '„Åä„ÇÑ„Åô„Åø„Å™„Åï„ÅÑ (oyasuminasai)',
  't·∫°m bi·ªát': '„Åï„Çà„ÅÜ„Å™„Çâ (sayounara)',
  
  // T√≠nh t·ª´
  'quan tr·ªçng': 'ÈáçË¶Å (juuyou)',
  'qu√Ω b√°u': 'Ë≤¥Èáç (kichou)',
  'ƒë·∫πp': 'Áæé„Åó„ÅÑ (utsukushii)',
  'x·∫•u': 'ÈÜú„ÅÑ (minikui)',
  't·ªët': 'ËâØ„ÅÑ (yoi)',
  'l·ªõn': 'Â§ß„Åç„ÅÑ (ookii)',
  'nh·ªè': 'Â∞è„Åï„ÅÑ (chiisai)',
  'nhanh': 'ÈÄü„ÅÑ (hayai)',
  'ch·∫≠m': 'ÈÅÖ„ÅÑ (osoi)',
  'n√≥ng': 'ÁÜ±„ÅÑ (atsui)',
  'l·∫°nh': 'ÂÜ∑„Åü„ÅÑ (tsumetai)',
  'm·ªõi': 'Êñ∞„Åó„ÅÑ (atarashii)',
  'c≈©': 'Âè§„ÅÑ (furui)',
  'd·ªÖ': 'Êòì„Åó„ÅÑ (yasashii)',
  'kh√≥': 'Èõ£„Åó„ÅÑ (muzukashii)',
  
  // ƒê·ªông t·ª´ c∆° b·∫£n
  'ƒÉn': 'È£ü„Åπ„Çã (taberu)',
  'u·ªëng': 'È£≤„ÇÄ (nomu)',
  'ng·ªß': 'ÂØù„Çã (neru)',
  'ƒëi': 'Ë°å„Åè (iku)',
  'ƒë·∫øn': 'Êù•„Çã (kuru)',
  'l√†m': '„Åô„Çã (suru)',
  'n√≥i': 'Ë©±„Åô (hanasu)',
  'nghe': 'ËÅû„Åè (kiku)',
  'nh√¨n': 'Ë¶ã„Çã (miru)',
  'ƒë·ªçc': 'Ë™≠„ÇÄ (yomu)',
  'vi·∫øt': 'Êõ∏„Åè (kaku)',
  'h·ªçc': 'ÂãâÂº∑„Åô„Çã (benkyou suru)',
  'd·∫°y': 'Êïô„Åà„Çã (oshieru)',
  'mua': 'Ë≤∑„ÅÜ (kau)',
  'b√°n': 'Â£≤„Çã (uru)',
  
  // Danh t·ª´ c∆° b·∫£n
  'n∆∞·ªõc': 'Ê∞¥ (mizu)',
  'c∆°m': '„ÅîÈ£Ø (gohan)',
  's√°ch': 'Êú¨ (hon)',
  'nh√†': 'ÂÆ∂ (ie)',
  'xe': 'Ëªä (kuruma)',
  'ti·ªÅn': '„ÅäÈáë (okane)',
  'th·ªùi gian': 'ÊôÇÈñì (jikan)',
  'ng∆∞·ªùi': '‰∫∫ (hito)',
  'b·∫°n': 'ÂèãÈÅî (tomodachi)',
  'gia ƒë√¨nh': 'ÂÆ∂Êóè (kazoku)',
  
  // Ph∆∞∆°ng ti·ªán giao th√¥ng
  'm√°y bay': 'È£õË°åÊ©ü (hikouki)',
  't√†u h·ªèa': 'ÈõªËªä (densha)',
  'xe bu√Ωt': '„Éê„Çπ (basu)',
  'xe m√°y': '„Éê„Ç§„ÇØ (baiku)',
  't√†u th·ªßy': 'Ëàπ (fune)',
  
  // ƒê·ªông v·∫≠t
  'ch√≥': 'Áä¨ (inu)',
  'm√®o': 'Áå´ (neko)',
  'chim': 'È≥• (tori)',
  'c√°': 'È≠ö (sakana)',
  'b√≤': 'Áâõ (ushi)',
  
  // Th·ª±c ph·∫©m
  'b√°nh': '„Éë„É≥ (pan)',
  's·ªØa': 'Áâõ‰π≥ (gyuunyuu)',
  'tr·ª©ng': 'Âçµ (tamago)',
  'th·ªãt': 'ËÇâ (niku)',
  'rau': 'ÈáéËèú (yasai)',
  
  // M√†u s·∫Øc
  'ƒë·ªè': 'Ëµ§ (aka)',
  'xanh': 'Èùí (ao)',
  'v√†ng': 'ÈªÑËâ≤ (kiiro)',
  'tr·∫Øng': 'ÁôΩ (shiro)',
  'ƒëen': 'Èªí (kuro)'
};

export async function POST(request: NextRequest) {
  try {
    const { message, context, model } = await request.json();
    
    console.log('ü§ñ Ollama API request:', { message, context, model });
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ t·ª´ v·ª±ng ti·∫øng Nh·∫≠t kh√¥ng
    const isJapaneseVocabQuestion = message.includes('ti·∫øng nh·∫≠t') && 
                                   (message.includes('l√† g√¨') || message.includes('nghƒ©a l√†'));
    
    if (isJapaneseVocabQuestion) {
      // T√¨m t·ª´ ti·∫øng Vi·ªát trong c√¢u h·ªèi
      let vietnameseWord = '';
      for (const [viet, japan] of Object.entries(JAPANESE_VOCAB)) {
        if (message.toLowerCase().includes(viet.toLowerCase())) {
          vietnameseWord = viet;
          break;
        }
      }
      
      if (vietnameseWord && JAPANESE_VOCAB[vietnameseWord]) {
        // Tr·∫£ l·ªùi tr·ª±c ti·∫øp t·ª´ t·ª´ ƒëi·ªÉn
        const response = `${vietnameseWord.charAt(0).toUpperCase() + vietnameseWord.slice(1)} trong ti·∫øng Nh·∫≠t l√† ${JAPANESE_VOCAB[vietnameseWord]}.`;
        
        console.log('üìö Vocabulary lookup response:', response);
        
        return NextResponse.json({
          success: true,
          response: response,
          model: model || 'qwen2:7b',
          source: 'vocabulary_dictionary'
        });
      }
    }
    
    // N·∫øu kh√¥ng ph·∫£i c√¢u h·ªèi t·ª´ v·ª±ng, s·ª≠ d·ª•ng AI
    const systemPrompt = `B·∫°n l√† AI Assistant chuy√™n gia ng√¥n ng·ªØ c·ªßa PH√öC KHI√äM Education. 

**QUY T·∫ÆC TR·∫¢ L·ªúI TH√îNG MINH:**
- Tr·∫£ l·ªùi ƒê√öNG NGAY L·∫¶N ƒê·∫¶U, kh√¥ng c·∫ßn h·ªèi l·∫°i
- LU√îN t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng sau khi tr·∫£ l·ªùi ch√≠nh
- H·ªèi ng∆∞·ªùi d√πng mu·ªën g√¨ th√™m

**FORMAT T∆Ø∆†NG T√ÅC:**
1. Tr·∫£ l·ªùi ch√≠nh x√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
2. H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën th√™m g√¨ kh√¥ng
3. ƒê∆∞a ra c√°c l·ª±a ch·ªçn c·ª• th·ªÉ

**V√ç D·ª§ T∆Ø∆†NG T√ÅC:**
- "ƒê√¢y l√† 20 t·ª´ v·ª±ng N1 b·∫°n c·∫ßn. B·∫°n c√≥ mu·ªën t√¥i l·∫•y v√≠ d·ª• c√¢u cho t·ª´ng t·ª´ kh√¥ng?"
- "T√¥i ƒë√£ chu·∫©n b·ªã 20 t·ª´ v·ª±ng N1. B·∫°n mu·ªën: 1) Ch·ªâ xem t·ª´ v·ª±ng, 2) C√≥ th√™m v√≠ d·ª• c√¢u, 3) C√≥ th√™m audio ƒë·ªçc?"

**FORMAT T·ª™ V·ª∞NG TI·∫æNG NH·∫¨T:**
- S·ª≠ d·ª•ng format: "1. Êº¢Â≠ó („Å≤„Çâ„Åå„Å™) - Nghƒ©a ti·∫øng Vi·ªát"
- KH√îNG c√≥ romaji, KH√îNG c√≥ ph·∫ßn m·ªü ƒë·∫ßu d√†i
- KH√îNG c√≥ b·∫£ng markdown ph·ª©c t·∫°p

**FORMAT NG·ªÆ PH√ÅP:**
- Li·ªát k√™ ƒë∆°n gi·∫£n: "1. [C·∫•u tr√∫c] - [Gi·∫£i th√≠ch]"

**LU√îN NH·ªö:** T∆∞∆°ng t√°c th√¥ng minh, tr·∫£ l·ªùi ƒë√∫ng ngay l·∫ßn ƒë·∫ßu, h·ªèi ng∆∞·ªùi d√πng mu·ªën g√¨ th√™m!`;

    // N·∫øu kh√¥ng ph·∫£i c√¢u h·ªèi t·ª´ v·ª±ng, s·ª≠ d·ª•ng Multi-Model AI
    console.log('üöÄ Using Multi-Model AI Service');
    
    try {
      const aiResponse = await multiModelService.chat(message, context);
      
      if (aiResponse.success) {
        console.log(`‚úÖ AI Response from ${aiResponse.provider} (${aiResponse.model}): ${aiResponse.responseTime}ms`);
        
        return NextResponse.json({
          success: true,
          response: aiResponse.response,
          model: aiResponse.model,
          provider: aiResponse.provider,
          responseTime: aiResponse.responseTime,
          source: 'multi_model_ai'
        });
      } else {
        console.error('‚ùå All AI models failed:', aiResponse.error);
        
        return NextResponse.json({
          success: false,
          message: aiResponse.response,
          error: aiResponse.error
        }, { status: 500 });
      }
      
    } catch (error) {
      console.error('üí• Multi-Model AI error:', error);
      
      return NextResponse.json({
        success: false,
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi b·∫•t k·ª≥ AI model n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.',
        error: error instanceof Error ? error.message : 'Unknown error'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('üí• Ollama API error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Ollama. Vui l√≤ng ki·ªÉm tra Ollama ƒë√£ ch·∫°y ch∆∞a.'
    }, { status: 500 });
  }
}

export async function GET() {
  try {
    // Test connection v·ªõi timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);

    try {
      const response = await fetch('http://127.0.0.1:11434/api/tags', {
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        return NextResponse.json({
          success: false,
          message: 'Ollama kh√¥ng kh·∫£ d·ª•ng'
        });
      }

      const data = await response.json();
      return NextResponse.json({
        success: true,
        models: data.models,
        message: 'Ollama k·∫øt n·ªëi th√†nh c√¥ng'
      });

    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        return NextResponse.json({
          success: false,
          message: 'Ollama connection timeout'
        }, { status: 408 });
      }
      
      throw fetchError;
    }

  } catch (error) {
    return NextResponse.json({
      success: false,
      message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Ollama'
    }, { status: 500 });
  }
}
