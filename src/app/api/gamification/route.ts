import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Mock gamification data - in production, fetch from database
    const gamificationData = {
      level: 5,
      experience: 750,
      experienceToNext: 1000,
      totalPoints: 2840,
      streak: 7,
      achievements: [
        {
          id: '1',
          title: 'Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
          description: 'Ho√†n th√†nh b√†i h·ªçc ƒë·∫ßu ti√™n',
          icon: 'book',
          category: 'learning',
          rarity: 'common',
          isUnlocked: true,
          progress: 1,
          maxProgress: 1,
          unlockedAt: new Date('2024-01-15'),
          points: 50
        },
        {
          id: '2',
          title: 'Chu·ªói h·ªçc t·∫≠p',
          description: 'H·ªçc li√™n ti·∫øp 7 ng√†y',
          icon: 'clock',
          category: 'streak',
          rarity: 'rare',
          isUnlocked: true,
          progress: 7,
          maxProgress: 7,
          unlockedAt: new Date('2024-01-20'),
          points: 100
        },
        {
          id: '3',
          title: 'Th√†nh t√≠ch xu·∫•t s·∫Øc',
          description: 'ƒê·∫°t ƒëi·ªÉm t·ªëi ƒëa trong 10 b√†i ki·ªÉm tra',
          icon: 'trophy',
          category: 'milestone',
          rarity: 'epic',
          isUnlocked: false,
          progress: 7,
          maxProgress: 10,
          points: 200
        }
      ],
      recentActivity: [
        {
          id: '1',
          type: 'lesson_completed',
          title: 'Ho√†n th√†nh b√†i h·ªçc',
          description: 'B√†i 15: Ng·ªØ ph√°p N5',
          points: 25,
          timestamp: new Date(),
          icon: 'üìö'
        },
        {
          id: '2',
          type: 'achievement_unlocked',
          title: 'M·ªü kh√≥a th√†nh t√≠ch',
          description: 'Chu·ªói h·ªçc t·∫≠p - 7 ng√†y',
          points: 100,
          timestamp: new Date(Date.now() - 86400000),
          icon: 'üèÜ'
        }
      ],
      dailyGoals: [
        {
          id: '1',
          title: 'Ho√†n th√†nh 3 b√†i h·ªçc',
          description: 'H·ªçc 3 b√†i h·ªçc m·ªõi h√¥m nay',
          target: 3,
          current: 2,
          reward: 50,
          isCompleted: false,
          type: 'lessons'
        },
        {
          id: '2',
          title: 'H·ªçc 30 ph√∫t',
          description: 'D√†nh 30 ph√∫t h·ªçc t·∫≠p',
          target: 30,
          current: 25,
          reward: 30,
          isCompleted: false,
          type: 'minutes'
        }
      ]
    };

    return NextResponse.json(gamificationData);
  } catch (error) {
    if (process.env.NODE_ENV === 'development') console.error('Error fetching gamification data:', error);
    return NextResponse.json({ error: 'Failed to fetch gamification data' }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { action, data } = await request.json();

    switch (action) {
      case 'complete_lesson':
        return handleLessonCompletion(session.user.email, data);
      
      case 'unlock_achievement':
        return handleAchievementUnlock(session.user.email, data);
      
      case 'update_streak':
        return handleStreakUpdate(session.user.email, data);
      
      case 'complete_goal':
        return handleGoalCompletion(session.user.email, data);
      
      default:
        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') console.error('Error processing gamification action:', error);
    return NextResponse.json({ error: 'Failed to process action' }, { status: 500 });
  }
}

async function handleLessonCompletion(userEmail: string, data: any) {
  // Mock implementation - in production, update database
  const experienceGained = 25;
  const pointsGained = 25;
  
  if (process.env.NODE_ENV === 'development') {
    console.log(`üìö Lesson completed by ${userEmail}:`, {
      lessonId: data.lessonId,
      experienceGained,
      pointsGained
    });
  }

  return NextResponse.json({
    success: true,
    experienceGained,
    pointsGained,
    message: 'B√†i h·ªçc ho√†n th√†nh! +25 ƒëi·ªÉm kinh nghi·ªám'
  });
}

async function handleAchievementUnlock(userEmail: string, data: any) {
  // Mock implementation - in production, update database
  const pointsGained = data.points || 100;
  
  if (process.env.NODE_ENV === 'development') {
    console.log(`üèÜ Achievement unlocked by ${userEmail}:`, {
      achievementId: data.achievementId,
      pointsGained
    });
  }

  return NextResponse.json({
    success: true,
    pointsGained,
    message: `Th√†nh t√≠ch m·ªü kh√≥a! +${pointsGained} ƒëi·ªÉm`
  });
}

async function handleStreakUpdate(userEmail: string, data: any) {
  // Mock implementation - in production, update database
  const newStreak = data.streak || 1;
  
  if (process.env.NODE_ENV === 'development') {
    console.log(`üî• Streak updated for ${userEmail}:`, {
      newStreak,
      previousStreak: data.previousStreak
    });
  }

  return NextResponse.json({
    success: true,
    streak: newStreak,
    message: `Chu·ªói h·ªçc t·∫≠p: ${newStreak} ng√†y!`
  });
}

async function handleGoalCompletion(userEmail: string, data: any) {
  // Mock implementation - in production, update database
  const pointsGained = data.reward || 50;
  
  if (process.env.NODE_ENV === 'development') {
    console.log(`üéØ Goal completed by ${userEmail}:`, {
      goalId: data.goalId,
      pointsGained
    });
  }

  return NextResponse.json({
    success: true,
    pointsGained,
    message: `M·ª•c ti√™u ho√†n th√†nh! +${pointsGained} ƒëi·ªÉm`
  });
} 